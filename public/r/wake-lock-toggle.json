{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "wake-lock-toggle",
  "type": "registry:component",
  "title": "Wake Lock Toggle",
  "description": "A component for toggling wake lock",
  "registryDependencies": [
    "wake-lock-toggle"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/wake-lock-toggle/wake-lock-toggle.tsx",
      "content": "\"use client\"\n\nimport { WakeLockManager, type WakeLockState } from \"@/registry/new-york/blocks/wake-lock-toggle/lib/wake-lock-utils\"\nimport { Button } from \"@/registry/new-york/ui/button\"\nimport { Moon, Sun } from \"lucide-react\"\nimport { useEffect, useState } from \"react\"\n\ntype WakeLockToggleProps = {\n    onActiveChange?: (isActive: boolean) => void\n    onError?: (error: string | null) => void\n    onSupportedChange?: (isSupported: boolean) => void\n    activeControl?: React.ReactNode\n    inactiveControl?: React.ReactNode\n}\n\nexport default function WakeLockToggle({\n    onActiveChange,\n    onError,\n    onSupportedChange,\n    activeControl,\n    inactiveControl\n}: WakeLockToggleProps) {\n    const [wakeLockManager] = useState(() => new WakeLockManager())\n    const [state, setState] = useState<WakeLockState>(wakeLockManager.getState())\n\n    // Update state when wake lock manager state changes\n    useEffect(() => {\n        setState(wakeLockManager.getState())\n    }, [])\n\n    // Handle visibility change events\n    useEffect(() => {\n        const handleVisibilityChange = async () => {\n            const newState = await wakeLockManager.handleVisibilityChange()\n            setState(newState)\n            if (newState.error) {\n                onError?.(newState.error.message)\n            }\n        }\n\n        document.addEventListener(\"visibilitychange\", handleVisibilityChange)\n        return () => {\n            document.removeEventListener(\"visibilitychange\", handleVisibilityChange)\n            wakeLockManager.releaseWakeLock()\n        }\n    }, [onError])\n\n    // Notify parent components of state changes\n    useEffect(() => {\n        onActiveChange?.(state.isActive)\n        onSupportedChange?.(state.isSupported)\n        if (state.error) {\n            onError?.(state.error.message)\n        }\n    }, [state, onActiveChange, onSupportedChange, onError])\n\n    const toggleWakeLock = async () => {\n        const newState = state.isActive\n            ? await wakeLockManager.releaseWakeLock()\n            : await wakeLockManager.requestWakeLock()\n        setState(newState)\n    }\n\n    if (state.isSupported === false) {\n        return <Button disabled>Not Supported</Button>\n    }\n\n    if (activeControl && inactiveControl) {\n        return (\n            <div onClick={toggleWakeLock} style={{ cursor: 'pointer' }}>\n                {state.isActive ? activeControl : inactiveControl}\n            </div>\n        )\n    }\n\n    return (\n        <Button\n            variant={state.isActive ? \"outline\" : \"default\"}\n            size=\"lg\"\n            onClick={toggleWakeLock}\n            className=\"gap-2\"\n            aria-pressed={state.isActive}\n        >\n            {state.isActive ? (\n                <>\n                    <Moon className=\"h-4 w-4\" />\n                    <span>Allow Screen to Sleep</span>\n                </>\n            ) : (\n                <>\n                    <Sun className=\"h-4 w-4\" />\n                    <span>Keep Screen Awake</span>\n                </>\n            )}\n        </Button>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}