{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "wake-lock-toggle",
  "type": "registry:component",
  "title": "Wake Lock Toggle",
  "description": "A component for toggling wake lock",
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/wake-lock-toggle/wake-lock-toggle.tsx",
      "content": "\"use client\"\n\nimport { WakeLockManager, type WakeLockState } from \"@/registry/new-york/blocks/wake-lock-toggle/lib/wake-lock-utils\"\nimport { Button } from \"@/registry/new-york/ui/button\"\nimport { Moon, Sun } from \"lucide-react\"\nimport { useEffect, useState } from \"react\"\n\ntype WakeLockToggleProps = {\n    onActiveChange?: (isActive: boolean) => void\n    onError?: (error: string | null) => void\n    onSupportedChange?: (isSupported: boolean) => void\n    activeControl?: React.ReactNode\n    inactiveControl?: React.ReactNode\n}\n\nexport default function WakeLockToggle({\n    onActiveChange,\n    onError,\n    onSupportedChange,\n    activeControl,\n    inactiveControl\n}: WakeLockToggleProps) {\n    const [wakeLockManager] = useState(() => new WakeLockManager())\n    const [state, setState] = useState<WakeLockState>(wakeLockManager.getState())\n\n    // Update state when wake lock manager state changes\n    useEffect(() => {\n        setState(wakeLockManager.getState())\n    }, [])\n\n    // Handle visibility change events\n    useEffect(() => {\n        const handleVisibilityChange = async () => {\n            const newState = await wakeLockManager.handleVisibilityChange()\n            setState(newState)\n            if (newState.error) {\n                onError?.(newState.error.message)\n            }\n        }\n\n        document.addEventListener(\"visibilitychange\", handleVisibilityChange)\n        return () => {\n            document.removeEventListener(\"visibilitychange\", handleVisibilityChange)\n            wakeLockManager.releaseWakeLock()\n        }\n    }, [onError])\n\n    // Notify parent components of state changes\n    useEffect(() => {\n        onActiveChange?.(state.isActive)\n        onSupportedChange?.(state.isSupported)\n        if (state.error) {\n            onError?.(state.error.message)\n        }\n    }, [state, onActiveChange, onSupportedChange, onError])\n\n    const toggleWakeLock = async () => {\n        const newState = state.isActive\n            ? await wakeLockManager.releaseWakeLock()\n            : await wakeLockManager.requestWakeLock()\n        setState(newState)\n    }\n\n    if (state.isSupported === false) {\n        return <Button disabled>Not Supported</Button>\n    }\n\n    if (activeControl && inactiveControl) {\n        return (\n            <div onClick={toggleWakeLock} style={{ cursor: 'pointer' }}>\n                {state.isActive ? activeControl : inactiveControl}\n            </div>\n        )\n    }\n\n    return (\n        <Button\n            variant={state.isActive ? \"outline\" : \"default\"}\n            size=\"lg\"\n            onClick={toggleWakeLock}\n            className=\"gap-2\"\n            aria-pressed={state.isActive}\n        >\n            {state.isActive ? (\n                <>\n                    <Moon className=\"h-4 w-4\" />\n                    <span>Allow Screen to Sleep</span>\n                </>\n            ) : (\n                <>\n                    <Sun className=\"h-4 w-4\" />\n                    <span>Keep Screen Awake</span>\n                </>\n            )}\n        </Button>\n    )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/wake-lock-toggle/lib/wake-lock-utils.ts",
      "content": "export interface WakeLockError {\n    message: string;\n    code?: string;\n}\n\nexport interface WakeLockState {\n    isActive: boolean;\n    isSupported: boolean;\n    error: WakeLockError | null;\n}\n\nexport class WakeLockManager {\n    private wakeLock: any = null;\n    private state: WakeLockState = {\n        isActive: false,\n        isSupported: false,\n        error: null\n    };\n\n    constructor() {\n        this.checkSupport();\n    }\n\n    private checkSupport() {\n        this.state.isSupported = \"wakeLock\" in navigator && typeof navigator.wakeLock?.request === \"function\";\n    }\n\n    public getState(): WakeLockState {\n        return { ...this.state };\n    }\n\n    public async requestWakeLock(): Promise<WakeLockState> {\n        if (!this.state.isSupported) {\n            this.state.error = {\n                message: \"Wake Lock API is not supported in this browser\"\n            };\n            return this.getState();\n        }\n\n        try {\n            if (!navigator.wakeLock) {\n                throw new Error(\"Wake Lock API is not available\");\n            }\n\n            const lock = await navigator.wakeLock.request(\"screen\");\n            if (!lock) {\n                throw new Error(\"Wake lock request failed\");\n            }\n\n            this.wakeLock = lock;\n            this.state.isActive = true;\n            this.state.error = null;\n\n            lock.addEventListener(\"release\", () => {\n                this.state.isActive = false;\n                this.wakeLock = null;\n            });\n\n            return this.getState();\n        } catch (err) {\n            this.state.isActive = false;\n            this.state.error = {\n                message: err instanceof Error\n                    ? err.message.includes(\"Permission was denied\")\n                        ? \"Please allow screen wake lock in your browser settings\"\n                        : `Wake lock request failed: ${err.message}`\n                    : \"Wake lock request failed with an unknown error\"\n            };\n            return this.getState();\n        }\n    }\n\n    public async releaseWakeLock(): Promise<WakeLockState> {\n        if (!this.wakeLock) {\n            return this.getState();\n        }\n\n        try {\n            await this.wakeLock.release();\n            this.state.isActive = false;\n            this.wakeLock = null;\n            this.state.error = null;\n            return this.getState();\n        } catch (err) {\n            this.state.error = {\n                message: err instanceof Error\n                    ? `Failed to release wake lock: ${err.message}`\n                    : \"Failed to release wake lock with an unknown error\"\n            };\n            return this.getState();\n        }\n    }\n\n    public async handleVisibilityChange(): Promise<WakeLockState> {\n        if (this.state.isActive && document.visibilityState === \"visible\") {\n            try {\n                return await this.requestWakeLock();\n            } catch (err) {\n                this.state.error = {\n                    message: err instanceof Error ? err.message : \"Failed to re-acquire wake lock\"\n                };\n                return this.getState();\n            }\n        }\n        return this.getState();\n    }\n} ",
      "type": "registry:lib"
    }
  ]
}